{"version":3,"sources":["components/utils/FieldLevelValidationForm.jsx","components/utils/FieldLevelValidationForm.module.css","components/utils/validation.js","assets/userProfile.png","components/common/Errors/Errors.module.css","components/Profile/InfoBlock/InfoBlock.module.css","components/Profile/InfoBlock/ContactsData.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/InfoBlock/ProfileStatusWithHooks.jsx","components/Profile/InfoBlock/ContactsData.jsx","components/Profile/InfoBlock/ProfileInfo.jsx","components/Profile/InfoBlock/ProfileInfoForm.jsx","components/Profile/InfoBlock/InfoBlock.jsx","components/Profile/MyPosts/MyPostsForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["FieldRequiredForm","Element","input","meta","error","touched","props","hasError","className","st","formControl","formErr","errMsg","createField","nameOfLabel","name","placeholder","component","typeOfField","validators","text","validate","module","exports","required","values","maxLengthValidation","maxLength","length","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","target","value","autoFocus","onBlur","updateStatus","onClick","ContactsData","contactsTitle","contactsValue","contacts","ProfileInfo","profile","goToEditMode","isOwner","fullName","aboutMe","Object","keys","map","c","key","lookingForAJob","lookingForAJobDescription","userId","Input","reduxForm","form","handleSubmit","onSubmit","type","InfoBlock","setUserPhoto","saveProfile","Preloader","description","src","photos","large","profileImg","alt","ProfileStatusWithHooks","about","files","initialValues","formData","then","maxLength15","Textarea","onSubmitSuccess","res","dispatch","reset","MyPosts","React","memo","addPost","post","posts","newPost","textOfPost","Post","message","likeCount","img","item","MyPostsContainer","connect","state","profilePage","postData","reverse","p","id","Profile","updateProfileStatus","ProfileContainer","refreshProfile","getProfile","getProfileStatus","userID","match","params","autorizedUserID","history","push","this","prevProps","prevState","snapshot","Component","compose","isAuth","userAuth","withRouter"],"mappings":"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","file":"static/js/4.b2a205be.chunk.js","sourcesContent":["import React from 'react';\nimport st from './FieldLevelValidationForm.module.css';\nimport {Field} from \"redux-form\";\n\nexport const FieldRequiredForm = Element => ({input, meta: {error, touched}, ...props}) => {\n    const hasError = error && touched;\n    return (\n        <div className={st.formControl + \" \" + (hasError ? st.formErr : \"\")}>\n            <Element {...input} {...props}/>\n            <div>{hasError && <span className={st.errMsg}>{error}</span>}</div>\n        </div>\n    );\n}\n\nexport const createField = (nameOfLabel, name, placeholder, component, typeOfField = {}, validators, ...text) => {\n    return (\n        <div>\n            {nameOfLabel && <label>{nameOfLabel}</label>}\n            <Field name={name} placeholder={placeholder} component={component} {...typeOfField}\n                   validate={validators}/> {text}\n        </div>\n    )\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FieldLevelValidationForm_formControl__1Q8wm\",\"formErr\":\"FieldLevelValidationForm_formErr__1-Gm8\",\"errMsg\":\"FieldLevelValidationForm_errMsg__3qk7d\"};","export const required = values => {\r\n    if(values) return undefined;\r\n    return \"That field is required!\";\r\n}\r\n\r\nexport const maxLengthValidation = maxLength => values => {\r\n    if(values.length >= maxLength) return `That field must to be contained less ${maxLength} symbols `;\r\n    return undefined;\r\n}","module.exports = __webpack_public_path__ + \"static/media/userProfile.dc8b1732.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errMsg\":\"Errors_errMsg__33YgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoImg\":\"InfoBlock_infoImg__1cxdH\",\"description\":\"InfoBlock_description__2MGbo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsData_contacts__7xmg0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2Pn3x\",\"newPost\":\"MyPosts_newPost__1BO1M\",\"post\":\"MyPosts_post__3AFXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__20Rd0\"};","import React, {useState, useEffect} from \"react\";\n\nconst ProfileStatus = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(()=>{\n       setStatus(props.status);\n    }, [props.status])\n\n    const statusActivate = () => {\n        setEditMode(true);\n    };\n\n    const statusDeactivate = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    };\n\n    const statusChange = (e) => {\n        setStatus(e.target.value)\n    };\n\n        return (\n            <div>\n                {!editMode ?\n                    <div>\n                        Status: <span onClick={statusActivate}>{props.status || 'Status...'} </span>\n                    </div>\n                    :\n                    <div>\n                        Status: <input onChange={statusChange} autoFocus onBlur={statusDeactivate}\n                                       value={status} />\n                    </div>\n                }\n            </div>\n        );\n};\n\nexport default ProfileStatus;","import React from 'react';\r\nimport st from './ContactsData.module.css';\r\n\r\nconst ContactsData = ({contactsTitle, contactsValue}) => {\r\n    return <div className={st.contacts}><b>{contactsTitle}</b>: {contactsValue}</div>\r\n};\r\n\r\nexport default ContactsData;","import React from 'react';\r\nimport st from \"./InfoBlock.module.css\";\r\nimport ContactsData from \"./ContactsData\";\r\n\r\nconst ProfileInfo = ({profile, goToEditMode, isOwner}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName ? profile.fullName : 'not data'}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n\r\n            <div className={st.contacts}>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(c => {\r\n                return <ContactsData key={c} contactsTitle={c} contactsValue={profile.contacts[c]}/>\r\n            })}\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job</b>: {profile.lookingForAJob ? ':)' : ':('}\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job description</b>: {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : 'not data'}\r\n            </div>\r\n\r\n            <div>\r\n                <b>UserID</b>: {profile.userId ? profile.userId : 'not data'}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, FieldRequiredForm} from \"../../utils/FieldLevelValidationForm\";\r\nimport st from './ContactsData.module.css';\r\nimport e from '../../common/Errors/Errors.module.css';\r\n\r\nconst Input = FieldRequiredForm(\"input\");\r\n\r\nconst ProfileInfoForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n\r\n            {\r\n                error && <div className={e.errMsg}>\r\n                    {error}\r\n                </div>\r\n            }\r\n\r\n            {\r\n                createField(\"Full name\", \"fullName\", \"Name\", Input, {type: \"text\"}, null)\r\n            }\r\n            {\r\n                createField(\"About me\", \"aboutMe\", \"About me\", Input, {type: \"text\"}, null)\r\n            }\r\n            Contacts: {\r\n            Object.keys(profile.contacts).map(key => <div className={st.contacts} key={key}>\r\n                {createField(key, \"contacts.\" + key, key, Input, {type: \"text\"}, null)}\r\n            </div>)\r\n        }\r\n            Looking for a job: {\r\n            createField(null, \"lookingForAJob\", null, Input, {type: \"checkbox\"}, null)\r\n        }\r\n            {\r\n                createField(\"Looking for a job description\", \"lookingForAJobDescription\", \"Description of a job\", Input, {type: \"text\"}, null)\r\n            }\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: \"edit-profile\"})(ProfileInfoForm);","import React, {useState} from \"react\";\r\nimport st from \"./InfoBlock.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport profileImg from '../../../assets/userProfile.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport ProfileInfoForm from \"./ProfileInfoForm\";\r\n\r\nconst InfoBlock = ({profile, status, updateStatus, setUserPhoto, isOwner, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    let onSetPhoto = (e) => {\r\n        if (e.target.files.length) {\r\n            setUserPhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const dataFromProfile = (formData) => {\r\n        saveProfile(formData).then(()=>{\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={st.description}>\r\n            <img src={profile.photos.large != null ? profile.photos.large : profileImg} alt=\"profileImg\"/>\r\n            <ProfileStatusWithHooks className={st.about} status={status} updateStatus={updateStatus}/>\r\n            {isOwner && <input type={\"file\"} onChange={onSetPhoto}/>}\r\n            {\r\n                editMode ? <ProfileInfoForm initialValues={profile} profile={profile} onSubmit={dataFromProfile}/> :\r\n                <ProfileInfo profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoBlock;","import React from \"react\";\r\nimport {reduxForm, reset} from \"redux-form\";\r\nimport {maxLengthValidation, required} from \"../../utils/validation\";\r\nimport {createField, FieldRequiredForm} from \"../../utils/FieldLevelValidationForm\";\r\n\r\nconst maxLength15 = maxLengthValidation(15);\r\nconst Textarea = FieldRequiredForm(\"textarea\");\r\n\r\nconst MyPostsForm = ({handleSubmit, reset}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(null, \"textOfPost\", \"Enter your post message...\", Textarea,\r\n                null, [required, maxLength15])}\r\n            <div>\r\n                <button>Add post!</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (res, dispatch) => {\r\n    dispatch(reset('posts'));\r\n};\r\n\r\nexport default (reduxForm({form: 'posts', onSubmitSuccess: afterSubmit})(MyPostsForm));","import React from \"react\";\r\nimport st from \"./MyPosts.module.css\";\r\nimport MyPostsForm from \"./MyPostsForm\";\r\n\r\nconst MyPosts = React.memo(({addPost, post}) => {\r\n\r\n    let sendNewPost = (values) => {\r\n        addPost(values.textOfPost);\r\n    }\r\n\r\n    return (\r\n        <div className={st.posts}>\r\n            <h2>Posts:</h2>\r\n            <div className={st.newPost}>\r\n                New post\r\n                <div className={st.post}>\r\n                    <MyPostsForm onSubmit={sendNewPost}/>\r\n                </div>\r\n            </div>\r\n            {post}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport st from \"./Post.module.css\";\r\n\r\nconst Post = ({message, likeCount, img}) => {\r\n  return (\r\n    <div className={st.item}>\r\n      <img src={img} alt=\"pict\" />\r\n      {message}\r\n      <div>\r\n        <span>Like: {likeCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { addPost } from \"../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport Post from './Posts/Post';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    post: [...state.profilePage.postData]\r\n        .reverse()\r\n        .map(p => (<Post message={p.message} key={p.id} img={p.img} likeCount={p.likeCount} />)),\r\n    posts: state.profilePage\r\n  }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport st from './Profile.module.css';\r\nimport InfoBlock from './InfoBlock/InfoBlock';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = ({profile, status, updateProfileStatus, setUserPhoto, isOwner, saveProfile}) =>{\r\n  return ( \r\n    <div className={st.profilePage}>\r\n    <InfoBlock profile={profile} status={status} updateStatus={updateProfileStatus} isOwner={isOwner} setUserPhoto={setUserPhoto} saveProfile={saveProfile} />\r\n    <MyPostsContainer />\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default Profile;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {getProfile, getProfileStatus, saveProfile, setUserPhoto, updateProfileStatus} from '../Redux/profile-reducer';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile = () => {\r\n        let {getProfile, getProfileStatus} = this.props;\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = this.props.autorizedUserID;\r\n            if (!userID) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        /*if (userID) {\r\n            this.props.history.push(`/profile/${userID}`);\r\n        }*/\r\n\r\n        getProfile(userID);\r\n        getProfileStatus(userID);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} isOwner={!this.props.match.params.userID} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.userAuth.isAuth,\r\n        autorizedUserID: state.userAuth.id\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getProfileStatus, updateProfileStatus, setUserPhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}